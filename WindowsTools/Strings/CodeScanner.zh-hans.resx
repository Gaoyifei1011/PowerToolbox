<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BarCode" xml:space="preserve">
    <value>条形码</value>
  </data>
  <data name="ClearRecognizeText" xml:space="preserve">
    <value>清空识别到的文字</value>
  </data>
  <data name="DragOverContent" xml:space="preserve">
    <value>拖放到“条码扫描”页面</value>
  </data>
  <data name="FilterCondition" xml:space="preserve">
    <value>PNG 图片(*.png)|*.png|JPG 图片(*.jpg)|*.jpg|BMP 图片(*.bmp)|*.bmp</value>
  </data>
  <data name="Generate" xml:space="preserve">
    <value>生成</value>
  </data>
  <data name="GenerateCode" xml:space="preserve">
    <value>生成的码</value>
  </data>
  <data name="GenerateCodeType" xml:space="preserve">
    <value>生成码的类型</value>
  </data>
  <data name="GenerateInputText" xml:space="preserve">
    <value> 请输入要生成的文本</value>
  </data>
  <data name="GenerateOptions" xml:space="preserve">
    <value>生成选项</value>
  </data>
  <data name="GeneratePhoto" xml:space="preserve">
    <value>生成图片</value>
  </data>
  <data name="IsPhotoSquare" xml:space="preserve">
    <value>图片是否为正方形</value>
  </data>
  <data name="IsPhotoSquareOffContent" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="IsPhotoSquareOnContent" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="NoMultiFile" xml:space="preserve">
    <value>请不要选择多个文件</value>
  </data>
  <data name="OpenPhoto" xml:space="preserve">
    <value>打开图片</value>
  </data>
  <data name="Operation" xml:space="preserve">
    <value>操作</value>
  </data>
  <data name="Parse" xml:space="preserve">
    <value>解析</value>
  </data>
  <data name="PhotoHeight" xml:space="preserve">
    <value>图片高度</value>
  </data>
  <data name="PhotoSize" xml:space="preserve">
    <value>生成的图片尺寸</value>
  </data>
  <data name="PhotoWidth" xml:space="preserve">
    <value>图片宽度</value>
  </data>
  <data name="PrintPhoto" xml:space="preserve">
    <value>打印图片</value>
  </data>
  <data name="QRCode" xml:space="preserve">
    <value>二维码</value>
  </data>
  <data name="ReadClipboardPhoto" xml:space="preserve">
    <value>读取剪贴板图片</value>
  </data>
  <data name="RecognizeText" xml:space="preserve">
    <value>识别到的文本</value>
  </data>
  <data name="ReserveBarCodeText" xml:space="preserve">
    <value>保留条形码底部数字</value>
  </data>
  <data name="ReserveBarCodeTextOffContent" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="ReserveBarCodeTextOnContent" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="SavePhoto" xml:space="preserve">
    <value>保存图片</value>
  </data>
  <data name="SelectFile" xml:space="preserve">
    <value>选择文件</value>
  </data>
  <data name="Tips" xml:space="preserve">
    <value>小提示</value>
  </data>
  <data name="TipContent1" xml:space="preserve">
    <value>1.生成条形码的内容只能由数字或字母组成</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>条码扫描</value>
  </data>
</root>
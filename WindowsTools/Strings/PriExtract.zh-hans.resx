<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbsolutePath" xml:space="preserve">
    <value>绝对路径</value>
  </data>
  <data name="AllLanguage" xml:space="preserve">
    <value>所有语言</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>内容</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="CopyAllFilePath" xml:space="preserve">
    <value>复制所有的文件路径</value>
  </data>
  <data name="CopyAllString" xml:space="preserve">
    <value>复制所有的字符串</value>
  </data>
  <data name="CopySelectedFilePath" xml:space="preserve">
    <value>复制选中的文件路径</value>
  </data>
  <data name="CopySelectedString" xml:space="preserve">
    <value>复制选中的字符串</value>
  </data>
  <data name="DragOverContent" xml:space="preserve">
    <value>添加到“包资源索引提取”页面</value>
  </data>
  <data name="EmbeddedData" xml:space="preserve">
    <value>嵌入的数据</value>
  </data>
  <data name="EmptyList" xml:space="preserve">
    <value>没有任何内容</value>
  </data>
  <data name="ExportAllEmbeddedData" xml:space="preserve">
    <value>导出所有的嵌入数据</value>
  </data>
  <data name="ExportSelectedEmbeddedData" xml:space="preserve">
    <value>导出选中的嵌入数据</value>
  </data>
  <data name="Extract" xml:space="preserve">
    <value>提取</value>
  </data>
  <data name="ExtractOptions" xml:space="preserve">
    <value>提取选项</value>
  </data>
  <data name="ExtractSaveEmbeddedData" xml:space="preserve">
    <value>保存提取的嵌入数据</value>
  </data>
  <data name="ExtractSaveFilePath" xml:space="preserve">
    <value>保存提取的文件路径</value>
  </data>
  <data name="ExtractSaveSamely" xml:space="preserve">
    <value>提取时同时保存</value>
  </data>
  <data name="ExtractSaveString" xml:space="preserve">
    <value>保存提取的字符串</value>
  </data>
  <data name="FilePath" xml:space="preserve">
    <value>文件路径</value>
  </data>
  <data name="FilterCondition" xml:space="preserve">
    <value>包资源索引文件(*.pri)|*.pri</value>
  </data>
  <data name="GetResults" xml:space="preserve">
    <value>从文件 {0} 中获取到 {1} 条数据</value>
  </data>
  <data name="Key" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>语言</value>
  </data>
  <data name="NoMultiFile" xml:space="preserve">
    <value>请不要选择多个文件</value>
  </data>
  <data name="NoOtherExtensionNameFile" xml:space="preserve">
    <value>只允许扩展名为".pri" 的文件</value>
  </data>
  <data name="NoSelectedFile" xml:space="preserve">
    <value>没有选择任何文件</value>
  </data>
  <data name="Operation" xml:space="preserve">
    <value>操作</value>
  </data>
  <data name="ProcessingNow" xml:space="preserve">
    <value>正在进行中</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="SelectDescription" xml:space="preserve">
    <value>单击以全选或反选</value>
  </data>
  <data name="SelectedFolder" xml:space="preserve">
    <value>已选择的文件夹：{0}</value>
  </data>
  <data name="SelectedToolTip" xml:space="preserve">
    <value>已选择</value>
  </data>
  <data name="SelectFile" xml:space="preserve">
    <value>选择文件</value>
  </data>
  <data name="SelectFolder" xml:space="preserve">
    <value>选择文件夹</value>
  </data>
  <data name="SelectSaveFolder" xml:space="preserve">
    <value>选择保存的文件夹</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>字符串</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>包资源索引提取</value>
  </data>
  <data name="UnSelectedToolTip" xml:space="preserve">
    <value>未选择</value>
  </data>
</root>
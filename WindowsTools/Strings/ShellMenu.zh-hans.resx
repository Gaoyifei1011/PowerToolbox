<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddMenuItem" xml:space="preserve">
    <value>添加菜单项</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>所有</value>
  </data>
  <data name="Background" xml:space="preserve">
    <value>背景</value>
  </data>
  <data name="ClearMenu" xml:space="preserve">
    <value>清空菜单项</value>
  </data>
  <data name="ClearMenuToolTip" xml:space="preserve">
    <value>清空所有的自定义菜单项</value>
  </data>
  <data name="DarkThemeIcon" xml:space="preserve">
    <value>深色主题图标</value>
  </data>
  <data name="DefaultIcon" xml:space="preserve">
    <value>默认图标</value>
  </data>
  <data name="Desktop" xml:space="preserve">
    <value>桌面</value>
  </data>
  <data name="Directory" xml:space="preserve">
    <value>目录</value>
  </data>
  <data name="Drive" xml:space="preserve">
    <value>驱动器</value>
  </data>
  <data name="EditMenu" xml:space="preserve">
    <value>编辑菜单</value>
  </data>
  <data name="EditMenuTip" xml:space="preserve">
    <value>菜单选项说明</value>
  </data>
  <data name="Extension" xml:space="preserve">
    <value>扩展名称</value>
  </data>
  <data name="IconFilterCondition" xml:space="preserve">
    <value>图标文件(*.ico)|*.ico</value>
  </data>
  <data name="LightThemeIcon" xml:space="preserve">
    <value>浅色主题图标</value>
  </data>
  <data name="MenuFileExtensionFormat" xml:space="preserve">
    <value>例如：.exe | .jpg | .txt</value>
  </data>
  <data name="MenuFileMatch" xml:space="preserve">
    <value>文件匹配类型</value>
  </data>
  <data name="MenuFileMatchFormat" xml:space="preserve">
    <value>匹配格式</value>
  </data>
  <data name="MenuFileMatchRule" xml:space="preserve">
    <value>匹配规则</value>
  </data>
  <data name="MenuFileNameFormat" xml:space="preserve">
    <value>例如：WindowsTools.exe | ShellMenu.jpg</value>
  </data>
  <data name="MenuFileNameRegexFormat" xml:space="preserve">
    <value>例如：[\s\S]+.jpg | [\w\W]*.jpg</value>
  </data>
  <data name="MenuFolderMatch" xml:space="preserve">
    <value>文件夹匹配类型</value>
  </data>
  <data name="MenuIcon" xml:space="preserve">
    <value>菜单图标</value>
  </data>
  <data name="MenuList" xml:space="preserve">
    <value>菜单列表</value>
  </data>
  <data name="MenuParameter" xml:space="preserve">
    <value>菜单参数</value>
  </data>
  <data name="MenuParameterPHText" xml:space="preserve">
    <value>未设置应用参数</value>
  </data>
  <data name="MenuProgramPath" xml:space="preserve">
    <value>程序文件路径</value>
  </data>
  <data name="MenuProgramPathPHText" xml:space="preserve">
    <value>未设置应用程序路径</value>
  </data>
  <data name="MenuSettings" xml:space="preserve">
    <value>菜单设置</value>
  </data>
  <data name="MenuTitle" xml:space="preserve">
    <value>菜单标题</value>
  </data>
  <data name="MenuTitlePHText" xml:space="preserve">
    <value>请输入菜单标题</value>
  </data>
  <data name="MenuTitleToolTip" xml:space="preserve">
    <value>菜单标题：</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>修改</value>
  </data>
  <data name="MoveDown" xml:space="preserve">
    <value>下移</value>
  </data>
  <data name="MoveUp" xml:space="preserve">
    <value>上移</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="NameRegex" xml:space="preserve">
    <value>名称（正则表达式）</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>不匹配</value>
  </data>
  <data name="Precautions" xml:space="preserve">
    <value>注意事项</value>
  </data>
  <data name="PrecautionsContent1" xml:space="preserve">
    <value>1.子菜单级别只支持到二级菜单</value>
  </data>
  <data name="PrecautionsContent2" xml:space="preserve">
    <value>2.菜单内容更新后，可能会存在延迟，请过一段时间再打开</value>
  </data>
  <data name="PrecautionsContent3" xml:space="preserve">
    <value>3.建议避免过多的二级菜单，因为这可能会导致菜单加载时间过长，从而引发卡顿现象。</value>
  </data>
  <data name="ProgramFilterCondition" xml:space="preserve">
    <value>可执行文件(*.exe)|*.exe</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>刷新</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="SelectIcon" xml:space="preserve">
    <value>选择图标</value>
  </data>
  <data name="SelectProgram" xml:space="preserve">
    <value>选择程序</value>
  </data>
  <data name="ShouldEnableThemeIcon" xml:space="preserve">
    <value>是否启用主题图标</value>
  </data>
  <data name="ShouldEnableThemeIconOffContent" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="ShouldEnableThemeIconOnContent" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="ShouldUseProgramIcon" xml:space="preserve">
    <value>是否使用应用程序图标</value>
  </data>
  <data name="ShouldUseProgramIconOffContent" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="ShouldUseProgramIconOnContent" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="TipContent1" xml:space="preserve">
    <value>1.菜单标题、程序文件路径为必填项</value>
  </data>
  <data name="TipContent2" xml:space="preserve">
    <value>2.菜单参数使用以下规则匹配文件和文件夹匹配类型</value>
  </data>
  <data name="TipContent3" xml:space="preserve">
    <value>① 单个文件匹配规则：{file} 和 {folder} 表示选中的第一个文件</value>
  </data>
  <data name="TipContent4" xml:space="preserve">
    <value>② 多个文件匹配规则：{files-split:''} 和 {folders-split:''} 表示选中的所有文件，split:'' 中的单引号添加文件分割参数。例如 split:' ' 表示以 ' ' 分割选中的所有文件</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>自定义扩展菜单</value>
  </data>
  <data name="UnknownDarkThemeIconPath" xml:space="preserve">
    <value>未设置深色主题图标路径</value>
  </data>
  <data name="UnknownDefaultIconPath" xml:space="preserve">
    <value>未设置默认图标路径</value>
  </data>
  <data name="UnknownLightThemeIconPath" xml:space="preserve">
    <value>未设置浅色主题图标路径</value>
  </data>
</root>
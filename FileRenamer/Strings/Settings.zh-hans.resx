<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlwaysShowBackdrop" xml:space="preserve">
    <value>始终显示背景色</value>
  </data>
  <data name="AlwaysShowBackdropDescription" xml:space="preserve">
    <value>窗口失去焦点时不会回退为纯色</value>
  </data>
  <data name="AlwaysShowBackdropOffContent" xml:space="preserve">
    <value>关闭</value>
  </data>
  <data name="AlwaysShowBackdropOnContent" xml:space="preserve">
    <value>开启</value>
  </data>
  <data name="Appearance" xml:space="preserve">
    <value>外观</value>
  </data>
  <data name="Backdrop" xml:space="preserve">
    <value>窗口背景材质</value>
  </data>
  <data name="BackdropAcrylic" xml:space="preserve">
    <value>亚克力</value>
  </data>
  <data name="BackdropDefault" xml:space="preserve">
    <value>不开启</value>
  </data>
  <data name="BackdropDescription" xml:space="preserve">
    <value>设置应用呈现的背景色</value>
  </data>
  <data name="BackdropMica" xml:space="preserve">
    <value>云母</value>
  </data>
  <data name="BackdropMicaAlt" xml:space="preserve">
    <value>云母（Alt）</value>
  </data>
  <data name="FileShellMenu" xml:space="preserve">
    <value>文件右键菜单</value>
  </data>
  <data name="FileShellMenuDescription" xml:space="preserve">
    <value>是否在系统中显示文件右键菜单</value>
  </data>
  <data name="FileShellMenuOffContent" xml:space="preserve">
    <value>隐藏</value>
  </data>
  <data name="FileShellMenuOnContent" xml:space="preserve">
    <value>显示</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>常规选项</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>界面语言</value>
  </data>
  <data name="LanguageDescription" xml:space="preserve">
    <value>修改应用界面显示的语言</value>
  </data>
  <data name="RestartExplorer" xml:space="preserve">
    <value>重启资源管理器</value>
  </data>
  <data name="SystemBackdropSettings" xml:space="preserve">
    <value>系统背景色设置</value>
  </data>
  <data name="SystemLanguageSettings" xml:space="preserve">
    <value>系统语言设置</value>
  </data>
  <data name="SystemThemeSettings" xml:space="preserve">
    <value>系统主题设置</value>
  </data>
  <data name="ThemeDark" xml:space="preserve">
    <value>深色</value>
  </data>
  <data name="ThemeDefault" xml:space="preserve">
    <value>使用系统设置</value>
  </data>
  <data name="ThemeLight" xml:space="preserve">
    <value>浅色</value>
  </data>
  <data name="ThemeMode" xml:space="preserve">
    <value>应用主题</value>
  </data>
  <data name="ThemeModeDescription" xml:space="preserve">
    <value>选择要显示的应用主题</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="TopMost" xml:space="preserve">
    <value>窗口置顶</value>
  </data>
  <data name="TopMostDescription" xml:space="preserve">
    <value>将当前应用的窗口置于最顶端</value>
  </data>
  <data name="TopMostOffContent" xml:space="preserve">
    <value>未置顶</value>
  </data>
  <data name="TopMostOnContent" xml:space="preserve">
    <value>置顶</value>
  </data>
</root>